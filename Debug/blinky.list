
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a18  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ba0  08000ba8  00010ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000ba0  08000ba0  00010ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ba4  08000ba4  00010ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010ba8  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010ba8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004148  00000000  00000000  00010bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000073b  00000000  00000000  00014d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000318  00000000  00000000  00015460  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002d0  00000000  00000000  00015778  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000ef0  00000000  00000000  00015a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002c2d  00000000  00000000  00016938  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00019565  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000c34  00000000  00000000  000195e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001a218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b88 	.word	0x08000b88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000b88 	.word	0x08000b88

080001c8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d006      	beq.n	80001e8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80001da:	490a      	ldr	r1, [pc, #40]	; (8000204 <RCC_AHB1PeriphClockCmd+0x3c>)
 80001dc:	4b09      	ldr	r3, [pc, #36]	; (8000204 <RCC_AHB1PeriphClockCmd+0x3c>)
 80001de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4313      	orrs	r3, r2
 80001e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80001e6:	e006      	b.n	80001f6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80001e8:	4906      	ldr	r1, [pc, #24]	; (8000204 <RCC_AHB1PeriphClockCmd+0x3c>)
 80001ea:	4b06      	ldr	r3, [pc, #24]	; (8000204 <RCC_AHB1PeriphClockCmd+0x3c>)
 80001ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	43db      	mvns	r3, r3
 80001f2:	4013      	ands	r3, r2
 80001f4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	40023800 	.word	0x40023800

08000208 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b08e      	sub	sp, #56	; 0x38
 800020c:	af00      	add	r7, sp, #0
	       To reconfigure the default setting of SystemInit() function, refer to
	        system_stm32f4xx.c file
	     */

	  /* GPIOD Periph clock enable */
	  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800020e:	2101      	movs	r1, #1
 8000210:	2008      	movs	r0, #8
 8000212:	f7ff ffd9 	bl	80001c8 <RCC_AHB1PeriphClockCmd>
	  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000216:	2101      	movs	r1, #1
 8000218:	2010      	movs	r0, #16
 800021a:	f7ff ffd5 	bl	80001c8 <RCC_AHB1PeriphClockCmd>
	  	  PINS::PIN0,
		  GpioModes::Output,
		  OutputTypes::PushPull,
		  OutputSpeed::MediumSpeed,
		  PullUpPullDown::NoPullUpPullDown,
		  AlternateFunction::AF15>testGPIO;
 800021e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f868 	bl	80002f8 <_ZN4GPIOILm1073876992ELm1ELm1ELm0ELm1ELm0ELm15EEC1Ev>
	  	  PINS::PIN2,
		  GpioModes::Output,
		  OutputTypes::PushPull,
		  OutputSpeed::MediumSpeed,
		  PullUpPullDown::NoPullUpPullDown,
		  AlternateFunction::AF15>testGPIO1;
 8000228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f897 	bl	8000360 <_ZN4GPIOILm1073876992ELm3ELm1ELm0ELm1ELm0ELm15EEC1Ev>
	  	  PINS::PIN4,
		  GpioModes::Output,
		  OutputTypes::PushPull,
		  OutputSpeed::MediumSpeed,
		  PullUpPullDown::NoPullUpPullDown,
		  AlternateFunction::AF15>testGPIO2;
 8000232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f8c6 	bl	80003c8 <_ZN4GPIOILm1073876992ELm5ELm1ELm0ELm1ELm0ELm15EEC1Ev>
	  	  PINS::PIN6,
		  GpioModes::Output,
		  OutputTypes::PushPull,
		  OutputSpeed::MediumSpeed,
		  PullUpPullDown::NoPullUpPullDown,
		  AlternateFunction::AF15>testGPIO3;
 800023c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f8f7 	bl	8000434 <_ZN4GPIOILm1073876992ELm7ELm1ELm0ELm1ELm0ELm15EEC1Ev>
	  	  PINS::PIN8,
		  GpioModes::Output,
		  OutputTypes::PushPull,
		  OutputSpeed::MediumSpeed,
		  PullUpPullDown::NoPullUpPullDown,
		  AlternateFunction::AF15>testGPIO4;
 8000246:	f107 0320 	add.w	r3, r7, #32
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f928 	bl	80004a0 <_ZN4GPIOILm1073876992ELm9ELm1ELm0ELm1ELm0ELm15EEC1Ev>
	  	  PINS::PIN10,
		  GpioModes::Output,
		  OutputTypes::PushPull,
		  OutputSpeed::MediumSpeed,
		  PullUpPullDown::NoPullUpPullDown,
		  AlternateFunction::AF15>testGPIO5;
 8000250:	f107 031c 	add.w	r3, r7, #28
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f959 	bl	800050c <_ZN4GPIOILm1073876992ELm11ELm1ELm0ELm1ELm0ELm15EEC1Ev>
	  	  PINS::PIN12,
		  GpioModes::Output,
		  OutputTypes::PushPull,
		  OutputSpeed::MediumSpeed,
		  PullUpPullDown::NoPullUpPullDown,
		  AlternateFunction::AF15>testGPIO6;
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	4618      	mov	r0, r3
 8000260:	f000 f98a 	bl	8000578 <_ZN4GPIOILm1073876992ELm13ELm1ELm0ELm1ELm0ELm15EEC1Ev>
	  	  PINS::PIN14,
		  GpioModes::Output,
		  OutputTypes::PushPull,
		  OutputSpeed::MediumSpeed,
		  PullUpPullDown::NoPullUpPullDown,
		  AlternateFunction::AF15>testGPIO7;
 8000264:	f107 0314 	add.w	r3, r7, #20
 8000268:	4618      	mov	r0, r3
 800026a:	f000 f9bb 	bl	80005e4 <_ZN4GPIOILm1073876992ELm15ELm1ELm0ELm1ELm0ELm15EEC1Ev>
	  	  PINS::PIN12,
		  GpioModes::Output,
		  OutputTypes::PushPull,
		  OutputSpeed::MediumSpeed,
		  PullUpPullDown::NoPullUpPullDown,
		  AlternateFunction::AF0>greenLED;
 800026e:	f107 0310 	add.w	r3, r7, #16
 8000272:	4618      	mov	r0, r3
 8000274:	f000 f9ec 	bl	8000650 <_ZN4GPIOILm1073875968ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev>
	  	  PINS::PIN13,
		  GpioModes::Output,
		  OutputTypes::PushPull,
		  OutputSpeed::MediumSpeed,
		  PullUpPullDown::NoPullUpPullDown,
		  AlternateFunction::AF0>orangeLED;
 8000278:	f107 030c 	add.w	r3, r7, #12
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fa1d 	bl	80006bc <_ZN4GPIOILm1073875968ELm14ELm1ELm0ELm1ELm0ELm0EEC1Ev>
	  	  PINS::PIN14,
		  GpioModes::Output,
		  OutputTypes::PushPull,
		  OutputSpeed::MediumSpeed,
		  PullUpPullDown::NoPullUpPullDown,
		  AlternateFunction::AF0>redLED;
 8000282:	f107 0308 	add.w	r3, r7, #8
 8000286:	4618      	mov	r0, r3
 8000288:	f000 fa4e 	bl	8000728 <_ZN4GPIOILm1073875968ELm15ELm1ELm0ELm1ELm0ELm0EEC1Ev>
	  	  PINS::PIN15,
		  GpioModes::Output,
		  OutputTypes::PushPull,
		  OutputSpeed::MediumSpeed,
		  PullUpPullDown::NoPullUpPullDown,
		  AlternateFunction::AF0>blueLED;
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	4618      	mov	r0, r3
 8000290:	f000 fa80 	bl	8000794 <_ZN4GPIOILm1073875968ELm16ELm1ELm0ELm1ELm0ELm0EEC1Ev>


//	reg_access<uint32_t, uint32_t, stm32fxx::registers::GPIOD_MODER, stm32fxx::bits::BIT1>::reg_or();

  int i = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	637b      	str	r3, [r7, #52]	; 0x34

  /* Infinite loop */
  while (1)
  {
//	  reg_access<uint32_t, uint32_t, stm32fxx::registers::GPIOD_ODR, stm32fxx::bits::BIT12>::reg_xor();
	  greenLED.toggle();
 8000298:	f107 0310 	add.w	r3, r7, #16
 800029c:	4618      	mov	r0, r3
 800029e:	f000 faaf 	bl	8000800 <_ZNK4GPIOILm1073875968ELm13ELm1ELm0ELm1ELm0ELm0EE6toggleEv>
	  orangeLED.toggle();
 80002a2:	f107 030c 	add.w	r3, r7, #12
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fab4 	bl	8000814 <_ZNK4GPIOILm1073875968ELm14ELm1ELm0ELm1ELm0ELm0EE6toggleEv>
	  redLED.toggle();
 80002ac:	f107 0308 	add.w	r3, r7, #8
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fab9 	bl	8000828 <_ZNK4GPIOILm1073875968ELm15ELm1ELm0ELm1ELm0ELm0EE6toggleEv>
	  blueLED.toggle();
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fabf 	bl	800083c <_ZNK4GPIOILm1073875968ELm16ELm1ELm0ELm1ELm0ELm0EE6toggleEv>
//	  reg_access<uint32_t, uint32_t, stm32fxx::registers::GPIOD_ODR, stm32fxx::bits::BIT13>::reg_xor();
//	  reg_access<uint32_t, uint32_t, stm32fxx::registers::GPIOD_ODR, stm32fxx::bits::BIT14>::reg_xor();
//	  reg_access<uint32_t, uint32_t, stm32fxx::registers::GPIOD_ODR, stm32fxx::bits::BIT15>::reg_xor();

	  Delay(0xFFFFFF);
 80002be:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80002c2:	f000 f804 	bl	80002ce <_Z5Delaym>
	i++;
 80002c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002c8:	3301      	adds	r3, #1
 80002ca:	637b      	str	r3, [r7, #52]	; 0x34
	  greenLED.toggle();
 80002cc:	e7e4      	b.n	8000298 <main+0x90>

080002ce <_Z5Delaym>:
  * @brief  Delay Function.
  * @param  nCount:specifies the Delay time length.
  * @retval None
  */
void Delay(__IO uint32_t nCount)
{
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
  while(nCount--)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	1e5a      	subs	r2, r3, #1
 80002da:	607a      	str	r2, [r7, #4]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	bf14      	ite	ne
 80002e0:	2301      	movne	r3, #1
 80002e2:	2300      	moveq	r3, #0
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d000      	beq.n	80002ec <_Z5Delaym+0x1e>
 80002ea:	e7f4      	b.n	80002d6 <_Z5Delaym+0x8>
  {
  }
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <_ZN4GPIOILm1073876992ELm1ELm1ELm0ELm1ELm0ELm15EEC1Ev>:
class GPIO{


public:

	GPIO(){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]

		//set mode register
		uint32_t tempMask = 0x00U;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 8000304:	2301      	movs	r3, #1
 8000306:	60fb      	str	r3, [r7, #12]

		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 8000308:	68f9      	ldr	r1, [r7, #12]
 800030a:	4811      	ldr	r0, [pc, #68]	; (8000350 <_ZN4GPIOILm1073876992ELm1ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x58>)
 800030c:	f000 faa0 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>

		//set ouput type register
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 8000310:	f000 fab0 	bl	8000874 <_ZN10reg_accessImmLm1073876996ELm0EE6reg_orEv>

		//set output speed register
		tempMask = 0x0U;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 8000318:	2301      	movs	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 800031c:	68f9      	ldr	r1, [r7, #12]
 800031e:	480d      	ldr	r0, [pc, #52]	; (8000354 <_ZN4GPIOILm1073876992ELm1ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x5c>)
 8000320:	f000 fa96 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>

		//set pull-up/pull-down register
		tempMask = 0x0U;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 800032c:	68f9      	ldr	r1, [r7, #12]
 800032e:	480a      	ldr	r0, [pc, #40]	; (8000358 <_ZN4GPIOILm1073876992ELm1ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x60>)
 8000330:	f000 fa8e 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>

		//Set Alternate Function Register
		if(pinNumber < PINS::PIN7){
			tempMask = 0x0U;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 1) * 4);
 8000338:	230f      	movs	r3, #15
 800033a:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionLowRegister, tempMask);
 800033c:	68f9      	ldr	r1, [r7, #12]
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <_ZN4GPIOILm1073876992ELm1ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x64>)
 8000340:	f000 fa86 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionHighRegister, tempMask);

		}


	}
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4618      	mov	r0, r3
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	40021008 	.word	0x40021008
 8000358:	4002100c 	.word	0x4002100c
 800035c:	40021020 	.word	0x40021020

08000360 <_ZN4GPIOILm1073876992ELm3ELm1ELm0ELm1ELm0ELm15EEC1Ev>:
	GPIO(){
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 800036c:	2310      	movs	r3, #16
 800036e:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 8000370:	68f9      	ldr	r1, [r7, #12]
 8000372:	4811      	ldr	r0, [pc, #68]	; (80003b8 <_ZN4GPIOILm1073876992ELm3ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x58>)
 8000374:	f000 fa6c 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 8000378:	f000 fa7c 	bl	8000874 <_ZN10reg_accessImmLm1073876996ELm0EE6reg_orEv>
		tempMask = 0x0U;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 8000380:	2310      	movs	r3, #16
 8000382:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 8000384:	68f9      	ldr	r1, [r7, #12]
 8000386:	480d      	ldr	r0, [pc, #52]	; (80003bc <_ZN4GPIOILm1073876992ELm3ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x5c>)
 8000388:	f000 fa62 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 8000394:	68f9      	ldr	r1, [r7, #12]
 8000396:	480a      	ldr	r0, [pc, #40]	; (80003c0 <_ZN4GPIOILm1073876992ELm3ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x60>)
 8000398:	f000 fa5a 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 1) * 4);
 80003a0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80003a4:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionLowRegister, tempMask);
 80003a6:	68f9      	ldr	r1, [r7, #12]
 80003a8:	4806      	ldr	r0, [pc, #24]	; (80003c4 <_ZN4GPIOILm1073876992ELm3ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x64>)
 80003aa:	f000 fa51 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4618      	mov	r0, r3
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40021008 	.word	0x40021008
 80003c0:	4002100c 	.word	0x4002100c
 80003c4:	40021020 	.word	0x40021020

080003c8 <_ZN4GPIOILm1073876992ELm5ELm1ELm0ELm1ELm0ELm15EEC1Ev>:
	GPIO(){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 80003d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003d8:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 80003da:	68f9      	ldr	r1, [r7, #12]
 80003dc:	4811      	ldr	r0, [pc, #68]	; (8000424 <_ZN4GPIOILm1073876992ELm5ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x5c>)
 80003de:	f000 fa37 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 80003e2:	f000 fa47 	bl	8000874 <_ZN10reg_accessImmLm1073876996ELm0EE6reg_orEv>
		tempMask = 0x0U;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 80003ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ee:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 80003f0:	68f9      	ldr	r1, [r7, #12]
 80003f2:	480d      	ldr	r0, [pc, #52]	; (8000428 <_ZN4GPIOILm1073876992ELm5ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x60>)
 80003f4:	f000 fa2c 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 8000400:	68f9      	ldr	r1, [r7, #12]
 8000402:	480a      	ldr	r0, [pc, #40]	; (800042c <_ZN4GPIOILm1073876992ELm5ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x64>)
 8000404:	f000 fa24 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 1) * 4);
 800040c:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8000410:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionLowRegister, tempMask);
 8000412:	68f9      	ldr	r1, [r7, #12]
 8000414:	4806      	ldr	r0, [pc, #24]	; (8000430 <_ZN4GPIOILm1073876992ELm5ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x68>)
 8000416:	f000 fa1b 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4618      	mov	r0, r3
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40021000 	.word	0x40021000
 8000428:	40021008 	.word	0x40021008
 800042c:	4002100c 	.word	0x4002100c
 8000430:	40021020 	.word	0x40021020

08000434 <_ZN4GPIOILm1073876992ELm7ELm1ELm0ELm1ELm0ELm15EEC1Ev>:
	GPIO(){
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 8000440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000444:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 8000446:	68f9      	ldr	r1, [r7, #12]
 8000448:	4811      	ldr	r0, [pc, #68]	; (8000490 <_ZN4GPIOILm1073876992ELm7ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x5c>)
 800044a:	f000 fa01 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 800044e:	f000 fa11 	bl	8000874 <_ZN10reg_accessImmLm1073876996ELm0EE6reg_orEv>
		tempMask = 0x0U;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 8000456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800045a:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 800045c:	68f9      	ldr	r1, [r7, #12]
 800045e:	480d      	ldr	r0, [pc, #52]	; (8000494 <_ZN4GPIOILm1073876992ELm7ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x60>)
 8000460:	f000 f9f6 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 800046c:	68f9      	ldr	r1, [r7, #12]
 800046e:	480a      	ldr	r0, [pc, #40]	; (8000498 <_ZN4GPIOILm1073876992ELm7ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x64>)
 8000470:	f000 f9ee 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 1) * 4);
 8000478:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800047c:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionLowRegister, tempMask);
 800047e:	68f9      	ldr	r1, [r7, #12]
 8000480:	4806      	ldr	r0, [pc, #24]	; (800049c <_ZN4GPIOILm1073876992ELm7ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x68>)
 8000482:	f000 f9e5 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4618      	mov	r0, r3
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000
 8000494:	40021008 	.word	0x40021008
 8000498:	4002100c 	.word	0x4002100c
 800049c:	40021020 	.word	0x40021020

080004a0 <_ZN4GPIOILm1073876992ELm9ELm1ELm0ELm1ELm0ELm15EEC1Ev>:
	GPIO(){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 80004ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004b0:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 80004b2:	68f9      	ldr	r1, [r7, #12]
 80004b4:	4811      	ldr	r0, [pc, #68]	; (80004fc <_ZN4GPIOILm1073876992ELm9ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x5c>)
 80004b6:	f000 f9cb 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 80004ba:	f000 f9db 	bl	8000874 <_ZN10reg_accessImmLm1073876996ELm0EE6reg_orEv>
		tempMask = 0x0U;
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 80004c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c6:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 80004c8:	68f9      	ldr	r1, [r7, #12]
 80004ca:	480d      	ldr	r0, [pc, #52]	; (8000500 <_ZN4GPIOILm1073876992ELm9ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x60>)
 80004cc:	f000 f9c0 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 80004d8:	68f9      	ldr	r1, [r7, #12]
 80004da:	480a      	ldr	r0, [pc, #40]	; (8000504 <_ZN4GPIOILm1073876992ELm9ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x64>)
 80004dc:	f000 f9b8 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 9) * 4);
 80004e4:	230f      	movs	r3, #15
 80004e6:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionHighRegister, tempMask);
 80004e8:	68f9      	ldr	r1, [r7, #12]
 80004ea:	4807      	ldr	r0, [pc, #28]	; (8000508 <_ZN4GPIOILm1073876992ELm9ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x68>)
 80004ec:	f000 f9b0 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4618      	mov	r0, r3
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000
 8000500:	40021008 	.word	0x40021008
 8000504:	4002100c 	.word	0x4002100c
 8000508:	40021024 	.word	0x40021024

0800050c <_ZN4GPIOILm1073876992ELm11ELm1ELm0ELm1ELm0ELm15EEC1Ev>:
	GPIO(){
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 8000518:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800051c:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 800051e:	68f9      	ldr	r1, [r7, #12]
 8000520:	4811      	ldr	r0, [pc, #68]	; (8000568 <_ZN4GPIOILm1073876992ELm11ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x5c>)
 8000522:	f000 f995 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 8000526:	f000 f9a5 	bl	8000874 <_ZN10reg_accessImmLm1073876996ELm0EE6reg_orEv>
		tempMask = 0x0U;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 800052e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000532:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 8000534:	68f9      	ldr	r1, [r7, #12]
 8000536:	480d      	ldr	r0, [pc, #52]	; (800056c <_ZN4GPIOILm1073876992ELm11ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x60>)
 8000538:	f000 f98a 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 8000544:	68f9      	ldr	r1, [r7, #12]
 8000546:	480a      	ldr	r0, [pc, #40]	; (8000570 <_ZN4GPIOILm1073876992ELm11ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x64>)
 8000548:	f000 f982 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 9) * 4);
 8000550:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000554:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionHighRegister, tempMask);
 8000556:	68f9      	ldr	r1, [r7, #12]
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <_ZN4GPIOILm1073876992ELm11ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x68>)
 800055a:	f000 f979 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000
 800056c:	40021008 	.word	0x40021008
 8000570:	4002100c 	.word	0x4002100c
 8000574:	40021024 	.word	0x40021024

08000578 <_ZN4GPIOILm1073876992ELm13ELm1ELm0ELm1ELm0ELm15EEC1Ev>:
	GPIO(){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 8000584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000588:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 800058a:	68f9      	ldr	r1, [r7, #12]
 800058c:	4811      	ldr	r0, [pc, #68]	; (80005d4 <_ZN4GPIOILm1073876992ELm13ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x5c>)
 800058e:	f000 f95f 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 8000592:	f000 f96f 	bl	8000874 <_ZN10reg_accessImmLm1073876996ELm0EE6reg_orEv>
		tempMask = 0x0U;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 800059a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800059e:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 80005a0:	68f9      	ldr	r1, [r7, #12]
 80005a2:	480d      	ldr	r0, [pc, #52]	; (80005d8 <_ZN4GPIOILm1073876992ELm13ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x60>)
 80005a4:	f000 f954 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 80005b0:	68f9      	ldr	r1, [r7, #12]
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <_ZN4GPIOILm1073876992ELm13ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x64>)
 80005b4:	f000 f94c 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 9) * 4);
 80005bc:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 80005c0:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionHighRegister, tempMask);
 80005c2:	68f9      	ldr	r1, [r7, #12]
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <_ZN4GPIOILm1073876992ELm13ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x68>)
 80005c6:	f000 f943 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40021008 	.word	0x40021008
 80005dc:	4002100c 	.word	0x4002100c
 80005e0:	40021024 	.word	0x40021024

080005e4 <_ZN4GPIOILm1073876992ELm15ELm1ELm0ELm1ELm0ELm15EEC1Ev>:
	GPIO(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 80005f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005f4:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 80005f6:	68f9      	ldr	r1, [r7, #12]
 80005f8:	4811      	ldr	r0, [pc, #68]	; (8000640 <_ZN4GPIOILm1073876992ELm15ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x5c>)
 80005fa:	f000 f929 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 80005fe:	f000 f939 	bl	8000874 <_ZN10reg_accessImmLm1073876996ELm0EE6reg_orEv>
		tempMask = 0x0U;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 8000606:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800060a:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 800060c:	68f9      	ldr	r1, [r7, #12]
 800060e:	480d      	ldr	r0, [pc, #52]	; (8000644 <_ZN4GPIOILm1073876992ELm15ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x60>)
 8000610:	f000 f91e 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 800061c:	68f9      	ldr	r1, [r7, #12]
 800061e:	480a      	ldr	r0, [pc, #40]	; (8000648 <_ZN4GPIOILm1073876992ELm15ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x64>)
 8000620:	f000 f916 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 9) * 4);
 8000628:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800062c:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionHighRegister, tempMask);
 800062e:	68f9      	ldr	r1, [r7, #12]
 8000630:	4806      	ldr	r0, [pc, #24]	; (800064c <_ZN4GPIOILm1073876992ELm15ELm1ELm0ELm1ELm0ELm15EEC1Ev+0x68>)
 8000632:	f000 f90d 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	40021008 	.word	0x40021008
 8000648:	4002100c 	.word	0x4002100c
 800064c:	40021024 	.word	0x40021024

08000650 <_ZN4GPIOILm1073875968ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev>:
	GPIO(){
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 800065c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000660:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 8000662:	68f9      	ldr	r1, [r7, #12]
 8000664:	4811      	ldr	r0, [pc, #68]	; (80006ac <_ZN4GPIOILm1073875968ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x5c>)
 8000666:	f000 f8f3 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 800066a:	f000 f911 	bl	8000890 <_ZN10reg_accessImmLm1073875972ELm0EE6reg_orEv>
		tempMask = 0x0U;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 8000672:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000676:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 8000678:	68f9      	ldr	r1, [r7, #12]
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <_ZN4GPIOILm1073875968ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x60>)
 800067c:	f000 f8e8 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 8000688:	68f9      	ldr	r1, [r7, #12]
 800068a:	480a      	ldr	r0, [pc, #40]	; (80006b4 <_ZN4GPIOILm1073875968ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x64>)
 800068c:	f000 f8e0 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 9) * 4);
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionHighRegister, tempMask);
 8000698:	68f9      	ldr	r1, [r7, #12]
 800069a:	4807      	ldr	r0, [pc, #28]	; (80006b8 <_ZN4GPIOILm1073875968ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x68>)
 800069c:	f000 f8d8 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40020c00 	.word	0x40020c00
 80006b0:	40020c08 	.word	0x40020c08
 80006b4:	40020c0c 	.word	0x40020c0c
 80006b8:	40020c24 	.word	0x40020c24

080006bc <_ZN4GPIOILm1073875968ELm14ELm1ELm0ELm1ELm0ELm0EEC1Ev>:
	GPIO(){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 80006c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006cc:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 80006ce:	68f9      	ldr	r1, [r7, #12]
 80006d0:	4811      	ldr	r0, [pc, #68]	; (8000718 <_ZN4GPIOILm1073875968ELm14ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x5c>)
 80006d2:	f000 f8bd 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 80006d6:	f000 f8db 	bl	8000890 <_ZN10reg_accessImmLm1073875972ELm0EE6reg_orEv>
		tempMask = 0x0U;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 80006de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006e2:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 80006e4:	68f9      	ldr	r1, [r7, #12]
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <_ZN4GPIOILm1073875968ELm14ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x60>)
 80006e8:	f000 f8b2 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 80006f4:	68f9      	ldr	r1, [r7, #12]
 80006f6:	480a      	ldr	r0, [pc, #40]	; (8000720 <_ZN4GPIOILm1073875968ELm14ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x64>)
 80006f8:	f000 f8aa 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 9) * 4);
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionHighRegister, tempMask);
 8000704:	68f9      	ldr	r1, [r7, #12]
 8000706:	4807      	ldr	r0, [pc, #28]	; (8000724 <_ZN4GPIOILm1073875968ELm14ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x68>)
 8000708:	f000 f8a2 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40020c00 	.word	0x40020c00
 800071c:	40020c08 	.word	0x40020c08
 8000720:	40020c0c 	.word	0x40020c0c
 8000724:	40020c24 	.word	0x40020c24

08000728 <_ZN4GPIOILm1073875968ELm15ELm1ELm0ELm1ELm0ELm0EEC1Ev>:
	GPIO(){
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 8000734:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000738:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 800073a:	68f9      	ldr	r1, [r7, #12]
 800073c:	4811      	ldr	r0, [pc, #68]	; (8000784 <_ZN4GPIOILm1073875968ELm15ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x5c>)
 800073e:	f000 f887 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 8000742:	f000 f8a5 	bl	8000890 <_ZN10reg_accessImmLm1073875972ELm0EE6reg_orEv>
		tempMask = 0x0U;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 800074a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800074e:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 8000750:	68f9      	ldr	r1, [r7, #12]
 8000752:	480d      	ldr	r0, [pc, #52]	; (8000788 <_ZN4GPIOILm1073875968ELm15ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x60>)
 8000754:	f000 f87c 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 8000760:	68f9      	ldr	r1, [r7, #12]
 8000762:	480a      	ldr	r0, [pc, #40]	; (800078c <_ZN4GPIOILm1073875968ELm15ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x64>)
 8000764:	f000 f874 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 9) * 4);
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionHighRegister, tempMask);
 8000770:	68f9      	ldr	r1, [r7, #12]
 8000772:	4807      	ldr	r0, [pc, #28]	; (8000790 <_ZN4GPIOILm1073875968ELm15ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x68>)
 8000774:	f000 f86c 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4618      	mov	r0, r3
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40020c00 	.word	0x40020c00
 8000788:	40020c08 	.word	0x40020c08
 800078c:	40020c0c 	.word	0x40020c0c
 8000790:	40020c24 	.word	0x40020c24

08000794 <_ZN4GPIOILm1073875968ELm16ELm1ELm0ELm1ELm0ELm0EEC1Ev>:
	GPIO(){
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 80007a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007a4:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 80007a6:	68f9      	ldr	r1, [r7, #12]
 80007a8:	4811      	ldr	r0, [pc, #68]	; (80007f0 <_ZN4GPIOILm1073875968ELm16ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x5c>)
 80007aa:	f000 f851 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 80007ae:	f000 f86f 	bl	8000890 <_ZN10reg_accessImmLm1073875972ELm0EE6reg_orEv>
		tempMask = 0x0U;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 80007b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007ba:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 80007bc:	68f9      	ldr	r1, [r7, #12]
 80007be:	480d      	ldr	r0, [pc, #52]	; (80007f4 <_ZN4GPIOILm1073875968ELm16ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x60>)
 80007c0:	f000 f846 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 80007cc:	68f9      	ldr	r1, [r7, #12]
 80007ce:	480a      	ldr	r0, [pc, #40]	; (80007f8 <_ZN4GPIOILm1073875968ELm16ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x64>)
 80007d0:	f000 f83e 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 9) * 4);
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionHighRegister, tempMask);
 80007dc:	68f9      	ldr	r1, [r7, #12]
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <_ZN4GPIOILm1073875968ELm16ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x68>)
 80007e0:	f000 f836 	bl	8000850 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40020c00 	.word	0x40020c00
 80007f4:	40020c08 	.word	0x40020c08
 80007f8:	40020c0c 	.word	0x40020c0c
 80007fc:	40020c24 	.word	0x40020c24

08000800 <_ZNK4GPIOILm1073875968ELm13ELm1ELm0ELm1ELm0ELm0EE6toggleEv>:

	void toggle() const{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

		reg_access<GPIOxRegisterType, GPIOxRegisterType, GPIOxOutputDataRegister, bitPosition>::reg_xor();
 8000808:	f000 f850 	bl	80008ac <_ZN10reg_accessImmLm1073875988ELm4096EE7reg_xorEv>
	}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <_ZNK4GPIOILm1073875968ELm14ELm1ELm0ELm1ELm0ELm0EE6toggleEv>:
	void toggle() const{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
		reg_access<GPIOxRegisterType, GPIOxRegisterType, GPIOxOutputDataRegister, bitPosition>::reg_xor();
 800081c:	f000 f856 	bl	80008cc <_ZN10reg_accessImmLm1073875988ELm8192EE7reg_xorEv>
	}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <_ZNK4GPIOILm1073875968ELm15ELm1ELm0ELm1ELm0ELm0EE6toggleEv>:
	void toggle() const{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
		reg_access<GPIOxRegisterType, GPIOxRegisterType, GPIOxOutputDataRegister, bitPosition>::reg_xor();
 8000830:	f000 f85c 	bl	80008ec <_ZN10reg_accessImmLm1073875988ELm16384EE7reg_xorEv>
	}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <_ZNK4GPIOILm1073875968ELm16ELm1ELm0ELm1ELm0ELm0EE6toggleEv>:
	void toggle() const{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
		reg_access<GPIOxRegisterType, GPIOxRegisterType, GPIOxOutputDataRegister, bitPosition>::reg_xor();
 8000844:	f000 f862 	bl	800090c <_ZN10reg_accessImmLm1073875988ELm32768EE7reg_xorEv>
	}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <_ZN14dynamic_accessImmE6reg_orEmm>:
        static register_value_type
                    reg_get(const register_address_type address) { return *reinterpret_cast<volatile register_value_type*>(address); }

        static void reg_set(const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address)  = value; }
        static void reg_and(const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address) &= value; }
        static void reg_or (const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address) |= value; }
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	6811      	ldr	r1, [r2, #0]
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	430a      	orrs	r2, r1
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <_ZN10reg_accessImmLm1073876996ELm0EE6reg_orEv>:
    static void reg_set()
    {
        *reinterpret_cast<volatile reg_type*>(address) = value;
    }

    static void reg_or()
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
    {

        *reinterpret_cast<volatile reg_type*>(address) |= value;
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <_ZN10reg_accessImmLm1073876996ELm0EE6reg_orEv+0x18>)
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <_ZN10reg_accessImmLm1073876996ELm0EE6reg_orEv+0x18>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6013      	str	r3, [r2, #0]

    }
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40021004 	.word	0x40021004

08000890 <_ZN10reg_accessImmLm1073875972ELm0EE6reg_orEv>:
    static void reg_or()
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
        *reinterpret_cast<volatile reg_type*>(address) |= value;
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <_ZN10reg_accessImmLm1073875972ELm0EE6reg_orEv+0x18>)
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <_ZN10reg_accessImmLm1073875972ELm0EE6reg_orEv+0x18>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6013      	str	r3, [r2, #0]
    }
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40020c04 	.word	0x40020c04

080008ac <_ZN10reg_accessImmLm1073875988ELm4096EE7reg_xorEv>:

    static void reg_xor()
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
    {

        *reinterpret_cast<volatile reg_type*>(address) ^= value;
 80008b0:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <_ZN10reg_accessImmLm1073875988ELm4096EE7reg_xorEv+0x1c>)
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <_ZN10reg_accessImmLm1073875988ELm4096EE7reg_xorEv+0x1c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80008ba:	6013      	str	r3, [r2, #0]

    }
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40020c14 	.word	0x40020c14

080008cc <_ZN10reg_accessImmLm1073875988ELm8192EE7reg_xorEv>:
    static void reg_xor()
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
        *reinterpret_cast<volatile reg_type*>(address) ^= value;
 80008d0:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <_ZN10reg_accessImmLm1073875988ELm8192EE7reg_xorEv+0x1c>)
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <_ZN10reg_accessImmLm1073875988ELm8192EE7reg_xorEv+0x1c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80008da:	6013      	str	r3, [r2, #0]
    }
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40020c14 	.word	0x40020c14

080008ec <_ZN10reg_accessImmLm1073875988ELm16384EE7reg_xorEv>:
    static void reg_xor()
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
        *reinterpret_cast<volatile reg_type*>(address) ^= value;
 80008f0:	4a05      	ldr	r2, [pc, #20]	; (8000908 <_ZN10reg_accessImmLm1073875988ELm16384EE7reg_xorEv+0x1c>)
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <_ZN10reg_accessImmLm1073875988ELm16384EE7reg_xorEv+0x1c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80008fa:	6013      	str	r3, [r2, #0]
    }
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40020c14 	.word	0x40020c14

0800090c <_ZN10reg_accessImmLm1073875988ELm32768EE7reg_xorEv>:
    static void reg_xor()
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
        *reinterpret_cast<volatile reg_type*>(address) ^= value;
 8000910:	4a05      	ldr	r2, [pc, #20]	; (8000928 <_ZN10reg_accessImmLm1073875988ELm32768EE7reg_xorEv+0x1c>)
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <_ZN10reg_accessImmLm1073875988ELm32768EE7reg_xorEv+0x1c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800091a:	6013      	str	r3, [r2, #0]
    }
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40020c14 	.word	0x40020c14

0800092c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000964 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000930:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000932:	e003      	b.n	800093c <LoopCopyDataInit>

08000934 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000936:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000938:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800093a:	3104      	adds	r1, #4

0800093c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000940:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000942:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000944:	d3f6      	bcc.n	8000934 <CopyDataInit>
  ldr  r2, =_sbss
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000948:	e002      	b.n	8000950 <LoopFillZerobss>

0800094a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800094a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800094c:	f842 3b04 	str.w	r3, [r2], #4

08000950 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000952:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000954:	d3f9      	bcc.n	800094a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000956:	f000 f841 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095a:	f000 f8f1 	bl	8000b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095e:	f7ff fc53 	bl	8000208 <main>
  bx  lr    
 8000962:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000964:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000968:	08000ba8 	.word	0x08000ba8
  ldr  r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000970:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000974:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000978:	2000001c 	.word	0x2000001c

0800097c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>

0800097e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000990:	e7fe      	b.n	8000990 <HardFault_Handler+0x4>

08000992 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000996:	e7fe      	b.n	8000996 <MemManage_Handler+0x4>

08000998 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800099c:	e7fe      	b.n	800099c <BusFault_Handler+0x4>

0800099e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <UsageFault_Handler+0x4>

080009a4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e0:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <SystemInit+0x60>)
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <SystemInit+0x60>)
 80009e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009f0:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <SystemInit+0x64>)
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <SystemInit+0x64>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <SystemInit+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <SystemInit+0x64>)
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <SystemInit+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <SystemInit+0x64>)
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <SystemInit+0x68>)
 8000a16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <SystemInit+0x64>)
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <SystemInit+0x64>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000a2a:	f000 f80d 	bl	8000a48 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a2e:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <SystemInit+0x60>)
 8000a30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a34:	609a      	str	r2, [r3, #8]
#endif
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00
 8000a40:	40023800 	.word	0x40023800
 8000a44:	24003010 	.word	0x24003010

08000a48 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000a56:	4a36      	ldr	r2, [pc, #216]	; (8000b30 <SetSysClock+0xe8>)
 8000a58:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <SetSysClock+0xe8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a60:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a62:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <SetSysClock+0xe8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d103      	bne.n	8000a80 <SetSysClock+0x38>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a7e:	d1f0      	bne.n	8000a62 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <SetSysClock+0xe8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	e001      	b.n	8000a96 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d142      	bne.n	8000b22 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a9c:	4a24      	ldr	r2, [pc, #144]	; (8000b30 <SetSysClock+0xe8>)
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <SetSysClock+0xe8>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000aa8:	4a22      	ldr	r2, [pc, #136]	; (8000b34 <SetSysClock+0xec>)
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <SetSysClock+0xec>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000ab4:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <SetSysClock+0xe8>)
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <SetSysClock+0xe8>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000abc:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <SetSysClock+0xe8>)
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <SetSysClock+0xe8>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000ac8:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <SetSysClock+0xe8>)
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <SetSysClock+0xe8>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000ad2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <SetSysClock+0xe8>)
 8000ad6:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <SetSysClock+0xf0>)
 8000ad8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000ada:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <SetSysClock+0xe8>)
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <SetSysClock+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ae4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ae6:	bf00      	nop
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <SetSysClock+0xe8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f9      	beq.n	8000ae8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <SetSysClock+0xf4>)
 8000af6:	f240 7205 	movw	r2, #1797	; 0x705
 8000afa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <SetSysClock+0xe8>)
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <SetSysClock+0xe8>)
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f023 0303 	bic.w	r3, r3, #3
 8000b06:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b08:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <SetSysClock+0xe8>)
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <SetSysClock+0xe8>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f043 0302 	orr.w	r3, r3, #2
 8000b12:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000b14:	bf00      	nop
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SetSysClock+0xe8>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f003 030c 	and.w	r3, r3, #12
 8000b1e:	2b08      	cmp	r3, #8
 8000b20:	d1f9      	bne.n	8000b16 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000
 8000b38:	07405419 	.word	0x07405419
 8000b3c:	40023c00 	.word	0x40023c00

08000b40 <__libc_init_array>:
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	4e0d      	ldr	r6, [pc, #52]	; (8000b78 <__libc_init_array+0x38>)
 8000b44:	4c0d      	ldr	r4, [pc, #52]	; (8000b7c <__libc_init_array+0x3c>)
 8000b46:	1ba4      	subs	r4, r4, r6
 8000b48:	10a4      	asrs	r4, r4, #2
 8000b4a:	2500      	movs	r5, #0
 8000b4c:	42a5      	cmp	r5, r4
 8000b4e:	d109      	bne.n	8000b64 <__libc_init_array+0x24>
 8000b50:	4e0b      	ldr	r6, [pc, #44]	; (8000b80 <__libc_init_array+0x40>)
 8000b52:	4c0c      	ldr	r4, [pc, #48]	; (8000b84 <__libc_init_array+0x44>)
 8000b54:	f000 f818 	bl	8000b88 <_init>
 8000b58:	1ba4      	subs	r4, r4, r6
 8000b5a:	10a4      	asrs	r4, r4, #2
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	42a5      	cmp	r5, r4
 8000b60:	d105      	bne.n	8000b6e <__libc_init_array+0x2e>
 8000b62:	bd70      	pop	{r4, r5, r6, pc}
 8000b64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b68:	4798      	blx	r3
 8000b6a:	3501      	adds	r5, #1
 8000b6c:	e7ee      	b.n	8000b4c <__libc_init_array+0xc>
 8000b6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b72:	4798      	blx	r3
 8000b74:	3501      	adds	r5, #1
 8000b76:	e7f2      	b.n	8000b5e <__libc_init_array+0x1e>
 8000b78:	08000ba0 	.word	0x08000ba0
 8000b7c:	08000ba0 	.word	0x08000ba0
 8000b80:	08000ba0 	.word	0x08000ba0
 8000b84:	08000ba4 	.word	0x08000ba4

08000b88 <_init>:
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8a:	bf00      	nop
 8000b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b8e:	bc08      	pop	{r3}
 8000b90:	469e      	mov	lr, r3
 8000b92:	4770      	bx	lr

08000b94 <_fini>:
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	bf00      	nop
 8000b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9a:	bc08      	pop	{r3}
 8000b9c:	469e      	mov	lr, r3
 8000b9e:	4770      	bx	lr
